# pymtl in brg-vip
$ source setup-brg.sh
$ source setup-asic.sh

# pymtl in zhang-01
$ source /work/zhang/common/tools/pymtl/pymtl-setup.sh


# state, next_state: registers ===================delays===
@s.combinational # one cycle delay!
def update_states():
  state.in_.value = next_state.out
@s.tick # 0 cycle delay
def undate_states():
  state = next_state # pointer
@s.tick # 2-cycle delay
def update_states():
  state.in_.next = next_state.out
  
# in combinational logic ================coding sequence===
# the coding sequence does matter!!
@s.combinational # one cycle delay!
def stall_states():
  stall = stall_A and stall_B and stall_C (1)
  # update stall_A
  # update stall_B
  # update stall_C
  
def stall_states():
  # update stall_A
  # update stall_B
  # update stall_C
  stall = stall_A and stall_B and stall_C (2)
# Get different circuit for (1) and (2)

# It is impossible to put vectors in IO
# The vector cannot be recgonized by the pymtl compiler

#! it does not support the comparison with negative numbers:
#  use reduce XNOR or the specific bits in 2's complement representation

# Don't use 2D array to represent registers
# can't elborate to verilog design!!

# Don't use extra local varible without specifing the data type!

# py.test ===================run & test design===
--tb=style            traceback print mode (auto/long/short/line/native/no).
py.test test/SparsePERTL_test.py --tb=short -s
# elborating Verilog and dump VCD for debugging
py.test test/SparsePERTL_test.py --tb=short --test-verilog --dump-vcd

# using gdb to debug the testing issue
gdb --args python /work/global/brg/install/venv-pkgs/x86_64-centos7/python2.7.13/bin/py.test test/SparsePERTL_test.py --tb=short --test-verilog --dump-vcd --pdb
(gdb) r
(gdb) bt
# eval(): evaluating function in the C testing file (generated by Verilator) 

# using verilator to target the bug
https://linux.die.net/man/1/verilator
$ verilator --cc top-level.v
