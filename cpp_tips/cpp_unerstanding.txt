### 1. pass by value, pointer, and reference ###
a. pass by value
void f (int p){
  ...
}
f(a);
b. pass by reference
void f (int &p){
  ...
}
f(a);
*** p has same adderss and value with a
c. pass by pointer
void f (int *p){
  ...
}
f(&a);
*** pointer p point to value a: that is *p=a
d. pass a pointer by reference
void f (int *&p){
  ...
}
*b=&a;
f(b);
*** same pointer p and b
void f (int *p){
  ...
}
*b=&a;
f(b);
*** different pointer p and b, both point to a

CPP point to a var/func/etc.
1.-> for accessing object member variables and methods via pointer to object

Foo *foo = new Foo();
foo->member_var = 10;
foo->member_func();
2.. for accessing object member variables and methods via object instance

Foo foo;
foo.member_var = 10;
foo.member_func();
3.:: for accessing static variables and methods of a class/struct or namespace. It can also be used to access variables and functions from another scope (actually class, struct, namespace are scopes in that case)

int some_val = Foo::static_var;
Foo::static_method();
int max_int = std::numeric_limits<int>::max();
