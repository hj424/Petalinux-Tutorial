1. static function inside a class VS "free" normal functions
Key notes: you can use the function inside a class without instantiate an object!
But the static function can't use the private values defined in the class.
e.g.
class Foo {
    Foo();
    type A();
    static int B();
}
In the main function, it is legal to call the static B function like followings:
int main {
    Foo.B()
    Foo C;
    C.A();
    C.B()
}
Thus why static function? 
(1) In the morden coding system, we prefer to encapsulate the functions (with similar functionality and same/short name) inside different classes.
To use neat function name and avoiding the name confliction, we uaually create static function inside different classes. 

2. static function out of a class: only accessable inside the file
static variable: it will not be cleared after invokation

3. classes:
* default: private value that can only be accessed by the functions inside the class

////////////////////////////////////////////////////////
class example_class {
  ......
}
example_class::example_class():   // constructor: runs when create an object
{
}
example_class::example_class():   // destructor: runs when delete the object
{                                 // It is called by the compiler when the object goes out of the scope.
}

object: obj; pointer to the obj: p_obj; member function of the obj: m_func
dot operator ".": obj.m_func()
arrow operator "->": p_obj->m_func()

5. Polymorphism in C++
1. compile time polymorphism: function/operator overloading
2. runtime polymorphism: function overriding; virtual function in the parent/base class, the function with same name is defined in the child/derived class
